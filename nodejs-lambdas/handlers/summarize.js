const { invokeModel } = require("../lib/bedrock");
const { getFileContent, put } = require("../lib/s3");

module.exports.summarize = async (event) => {
  console.log(`event: ${JSON.stringify(event, null, 2)}`);

  const transcriptS3Key = event.detail.object.key;
  const allowedExtensions = ["srt"];
  const extension = transcriptS3Key.split(".").pop();
  if (!allowedExtensions.includes(extension)) {
    console.log(`Extension ${extension} not supported for summarization`);
    return;
  }

  const transcriptContent = await getFileContent({
    Bucket: process.env.S3_BUCKET_TRANSCRIPTS,
    Key: transcriptS3Key,
  });
  const modelId = process.env.BEDROCK_MODEL_ID;

  // find latest timecode from subtitle transcript
  const timecodes = transcriptContent.toString().match(/\d{2}:\d{2}:\d{2}/g);
  const latestTimecode = timecodes[timecodes.length - 1];

  // TODO: get language from transcript
  const meetingLanguage = "Bulgarian";

  const prompt = `
  <instructions>
  You are an expert in analyzing meeting transcripts.
  This is a meeting transcription. The transcript was generated by an AI speech recognition tool and may contain some errors. Your task is to:
  1. Make a short transcript description.
  2. Extract a short list of discussion topics.
  3. Make a summary of that transcription.
  4. Split transcript into segments.
  5. List action items that are outcome from the transcript.
  
  Explanation of these tasks below.
  
  1. Transcript description:
  Short 1-2 sentences. 
  
  2. Discussion topics:
  Will be used as meeting tags. 1-2 words each, but be sure to be specific enough, no special symbols.
  
  3. Summary:
  Go into details. 
  
  4. Transcript segments:
  Each segment should represent a distinct topic or theme discussed during the meeting.
  For each segment provide time codes and a brief summary.
  
  5. Action items:
  Can you also extract action items mentioned during the meeting?
  </instructins>
  
  <important-guidelines>
  - Answer in the language meeting was held in.
  - segment time codes should match the content of the transcription. Avoid arbitrary or fixed intervals for time codes. If there are too many small segments, combine neighbouring segments into broader themes to keep the segment count manageable.
  - Keep the number of segments to a minimum - 5-10 is the ideal number.
  </important-guidelines>
  
  <target-language>${meetingLanguage}</target-language>
  <meeting-duration>${latestTimecode}</meeting-duration>
  
  Please, provide the output in the following JSON schema:
  
  {
      "description": string,
      "tags": [
          string,
          string,
          ...
      ],
      "summary": string,
      "segments": [
          {
              id: int, // incremental segment id starting at 0
              title: string, // title of segment
              time_start: string, // timestamp of segment start, in "hh:mm:ss" format
              time_end: string, // timestamp of segment end, in "hh:mm:ss" format
              segment_summary_bullets: [
                  string, // bullet items of segment summary
                  string,
                  ...
              ]
          }
      ],
      "action_items": [
          string, // action item 1
          string, // action item 2 ...
          ...
      ]
  }
  
<transcript>
${transcriptContent.toString()}
</transcript>
`;

  const response = await invokeModel(modelId, prompt);
  console.log(`response: ${JSON.stringify(response, null, 2)}`);
  const result = response.content[0].text;
  console.log(`result: ${result}`);

  // store to output bucket
  const outputKey = `${transcriptS3Key}.json`;
  await put({
    Bucket: process.env.S3_BUCKET_OUTPUT,
    Key: outputKey,
    Body: JSON.stringify(result, null, 2),
  });
};
